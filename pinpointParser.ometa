const Clutter = imports.gi.Clutter;
const Backgrounds = imports.backgrounds;
const Utils = imports.utils;

let Parser = ometa {
  spacesNoNl = (~'\n' space)*,

  bgValue = (~']' anything)+:n -> n.join(''),
  background = 'camera'                                 -> ['background', new Backgrounds.Camera()]
             | bgValue:n ?Utils.isMimeType(n, 'image/') -> ['background', new Backgrounds.Image(n)]
             | bgValue:n ?Utils.isMimeType(n, 'video/') -> ['background', new Backgrounds.Video(n)]
             | bgValue:n ?Utils.isValidColor(n)         -> ['background', new Backgrounds.Color(Utils.colorFromString(n))],

  styleName = spaces <letter (letter | digit | '-')+>,
  styleValue = styleName:k "=" (~']' anything)+:v -> [k, v.join('')]
             | styleName:k                        -> [k, k],
  style = styleValue:v ?Parser.isKeyword(v[0])    -> Parser.getValue(v[0], v[1]),

  property = '[' (style | background):p ']' -> p,
  headerProperty :d = spacesNoNl property:p appendProperty(d, p),
  slideProperty :s = spacesNoNl property:p appendProperty(s, p),

  comment = fromTo('#', '\n'):s        -> s.slice(1),
  content = ((~('\n' | '-''-') anything)*:s '\n') -> (s.join('') + '\n'),

  slideContent :s = (comment:cmt appendComment(s, cmt) |
                     content:cnt appendContent(s, cnt))+ -> s,

  slide = newSlide():s
          '-''-' spacesNoNl slideProperty(s)* spacesNoNl '\n'
          slideContent(s) -> s,

  shell = '#''!' (~space anything)* (~'\n' anything)* '\n'
        | empty,

  document = newDocument():d shell (headerProperty(d) | space+)* slide+:sds end -> { properties: d.properties, slides: sds }
};

let returnValue = function(value) { return function() { return value; }; };
let identity = function(value) { return value; };
let colorBackground = function(value) { return new Backgrounds.Color(Utils.colorFromString); };

Parser._keywords = {
  "fill": { name: "background-gravity", getValue: returnValue(Clutter.ContentGravity.RESIZE_FILL) },
  "fit": { name: "background-gravity", getValue: returnValue(Clutter.ContentGravity.RESIZE_ASPECT) },
  "font": { name: "font", getValue: identity },
  "markup": { name: "use-markup", getValue: returnValue(true) },
  "no-markup": { name: "use-markup", getValue: returnValue(false) },
  "duration": { name: "duration", getValue: parseFloat },
  "text-color": { name: "text-color", getValue: Utils.colorFromString },
  "text-align": { name: "text-align", getValue: Utils.getTextAlignment },
  "shading-opacity": { name: "shading-opacity", getValue: parseFloat },
  "transition": { name: "transition", getValue: identity },
  "command":  { name: "command", getValue: identity },
  "gravity":  { name: "gravity", getValue: Utils.getGravity },
};
Parser.isKeyword = function(key) {
  return (this._keywords.hasOwnProperty(key) ||
          Utils.isGravity(key));
};
Parser.getValueName = function(key) {
  if (this._keywords.hasOwnProperty(key))
    return this._keywords[key].name;
  else if (Utils.isGravity(key))
    return "gravity";
  return key;
};
Parser.getValue = function(key, value) {
  let nkey = this.getValueName(key);
  let nvalue = value;
  if (this._keywords.hasOwnProperty(key))
    nvalue = this._keywords[key].getValue(value);
  else if (this._keywords.hasOwnProperty(nkey))
    nvalue = this._keywords[nkey].getValue(value);
  return [nkey, nvalue];
};

Parser.newDocument = function() {
  return { properties: {},
           slides: [], };
};

Parser.newSlide = function() {
  return { comments: [],
           content: [],
           properties: {}, };
};
Parser.appendComment = function(slide, comment) {
  slide.comments.push(comment);
};
Parser.appendContent = function(slide, content) {
  slide.content.push(content);
};
Parser.appendProperty = function(container, tuple) {
  container.properties[tuple[0]] = tuple[1];
};

let parse = function(str) {
  return Parser.matchAll(str, 'document');
};
