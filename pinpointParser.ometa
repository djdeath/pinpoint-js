const Clutter = imports.gi.Clutter;
const Backgrounds = imports.backgrounds;

let Parser = ometa {
  spacesNoNl = (~'\n' space)*,

  background = 'camera'                                                         -> ['background', new Backgrounds.Camera()]
             | (~']' anything)+:f ?Backgrounds.isMimeType(f.join(''), 'image/') -> ['background', new Backgrounds.Image(f.join(''))]
             | (~']' anything)+:f ?Backgrounds.isMimeType(f.join(''), 'video/') -> ['background', new Backgrounds.Video(f.join(''))],
  style = "duration":k "=" (~']' anything)+:v                                     -> [k, parseFloat(v.join(''))]
        | (~']' anything)+:c ?Backgrounds.isValidColor(c.join(''))                -> ['background-color', Backgrounds.colorFromString(c.join(''))]
        | spaces <letter (letter | digit | '-')+>:s ?Parser.isGravity(s) spaces   -> ['gravity', Parser.getGravity(s)]
        | spaces <letter (letter | digit | '-')+>:s ?Parser.isKeyword(s) spaces   -> [s, true]
        | spaces <letter (letter | digit | '-')+>:k '=' (~']' anything)+:v        -> [k, v.join('')],

  property = '[' (style | background):p ']' -> p,
  headerProperty :d = spacesNoNl property:p appendProperty(d, p),
  slideProperty :s = spacesNoNl property:p appendProperty(s, p),

  comment = fromTo('#', '\n'):s        -> s.slice(1),
  content = ((~('\n' | '-''-') anything)*:s '\n') -> (s.join('') + '\n'),

  slideContent :s = (comment:cmt appendComment(s, cmt) |
                     content:cnt appendContent(s, cnt))+ -> s,

  slide = newSlide():s
          '-''-' spacesNoNl slideProperty(s)* spacesNoNl '\n'
          slideContent(s) -> s,

  shell = '#''!' (~space anything)* (~'\n' anything)* '\n'
        | empty,

  document = newDocument():d shell (headerProperty(d) | space+)* slide+:sds end -> { properties: d.properties, slides: sds }
};

Parser._gravities = {
  "top-left":     [Clutter.ActorAlign.START,  Clutter.ActorAlign.START],
  "top":          [Clutter.ActorAlign.CENTER, Clutter.ActorAlign.START],
  "top-right":    [Clutter.ActorAlign.END,    Clutter.ActorAlign.START],
  "left":         [Clutter.ActorAlign.START,  Clutter.ActorAlign.CENTER],
  "center":       [Clutter.ActorAlign.CENTER, Clutter.ActorAlign.CENTER],
  "right":        [Clutter.ActorAlign.END,    Clutter.ActorAlign.CENTER],
  "bottom-left":  [Clutter.ActorAlign.START,  Clutter.ActorAlign.END],
  "bottom":       [Clutter.ActorAlign.CENTER, Clutter.ActorAlign.END],
  "bottom-right": [Clutter.ActorAlign.END,  Clutter.ActorAlign.END],
};
Parser.isGravity = function(str) {
  return this._gravities.hasOwnProperty(str);
};
Parser.getGravity = function(str) {
  log('gravity ' + str + ' = ' + this._gravities[str]);
  return this._gravities[str];
};

Parser._keywords = {
  "fill": true,
  "no-markup": true,
};
Parser.isKeyword = function(str) {
  return this._keywords.hasOwnProperty(str);
};

Parser.newDocument = function() {
  return { properties: {},
           slides: [], };
};

Parser.newSlide = function() {
  return { comments: [],
           content: [],
           properties: {}, };
};
Parser.appendComment = function(slide, comment) {
  slide.comments.push(comment);
};
Parser.appendContent = function(slide, content) {
  slide.content.push(content);
};
Parser.appendProperty = function(container, tuple) {
  container.properties[tuple[0]] = tuple[1];
};

let parse = function(str) {
  let indexToPosition = function(source, idx) {
    let linePos = 0, lineNum = 0;
    for (let i = 0; i < idx; i++) {
      if (source.charAt(i) == '\n') {
        linePos = i;
        lineNum++;
      }
    }
    return { line: lineNum + 1,
             offset: idx - linePos };
  };

  let document;
  try {
    document = Parser.matchAll(str, 'document');
    //log(JSON.stringify(document, null, 2));
  } catch (e) {
    let pos = indexToPosition(str, e.idx);
    log('Parsing error at : line ' + pos.line + ' offset ' + pos.offset);
    throw e;
  }
  return document;
};
