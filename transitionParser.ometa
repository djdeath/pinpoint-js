const Utils = imports.utils;

let Parser = ometa {
  name = spaces <letter (letter | '-')*>,
  number = spaces <'-'? digit+ ('.' digit+)?>:f -> function() { return parseFloat(f); },
  expression = ( "-" -> (-1) |
                 empty -> 1 ):m '$' name:n -> function(ctx) { return m * ctx[n]; },

  value = number | expression,

  animation = name:a ?Utils.isAnimationMode(a) -> Utils.animationModeFromString(a),

  property :actor =
    name:p ( animation:a "(" value:v ")" -> { a: a, f: v } |
             value:v -> { a: Utils.animationModeFromString("linear"),
                          f: v } ):a
    addProperty(actor, p, { animation: a.a, getValue: a.f }),

  actorState :state =
    name:n "->" newObject:ret property(ret)* addProperty(state, n, ret),

  state :transition =
    name:n "=>" newObject:ret actorState(ret)* addProperty(transition, n, ret),

  transition = newObject:ret state(ret)* spaces end -> ret
};
Parser.newObject = function() { return {}; };
Parser.addProperty = function(o, p, v) { o[p] = v; };

let parse = function(str) {
  return Parser.matchAll(str, 'transition');
};
